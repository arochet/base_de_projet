******************
GUIDE DE BIENVENUE
******************

****************************
DESCRIPTION DE L'APPLICATION
****************************

-- Entrer la description ici --


****************
STATE MANAGEMENT
****************
L'application utilise RiverPod comme StateManagement
https://riverpod.dev/


********
BACK-END
********
Par défaut, ce projet est configuré avec FireBase. 
Firebase est un back-end géré par Google. Il s'occupe de l'authentification et de la base de données avec FireStore. 



**************
ENVIRONNEMENTS
**************

Il y a 3 environnements : 
    PROD : Version pour l'utilisateur finale
    TEST : Version pour les testeurs
    DEV : Version pour les developpeurs

Exemple pour tester si on est en développement: 
final env = ref.watch(environment.notifier).state.name;
if (env == Environment.dev)


**********************
ARCHITECTURE DU PROJET
**********************

Ce projet est contruit avec l'architecture Domain Driven Design. 
Les fichiers sont répartis en 4 dossiers :
    - PRESENTATION : Comprends tous les fichiers liés aux écrans de l'application
    - INFRASTRUCTURE : Comprends tous les fichiers liés à l'ajout / modification / suppression de données en base 
    - DOMAIN : Comprends toutes les classes du projet. 
    - APPLICATION : Tous les fichiers qui permettent de gerer les formulaires

Ajout d'une classe : 
    Lorsque l'on veut ajouter une classe on créer le fichier MaClasse.dart dans Domain, puis son
    équivalent MaClasseDTO.dart dans Infrastructure. DTO = Data Transfert Oject. C'est la version
    de la classe qui est compatible avec la base de données. 
    Cette classe peut avec des champs personnalisés que l'on va retrouve dans le fichier value_object.
    Ces champs personnalisés peut avec avoir des 'validators', ce qui permet de vérifier si le champs
    est valide ou non. 

    Exemple : La Classe UserData comprend le champ EmailAddress. Ce champs EmailAddress est un String 
    dans UserDataDTO. Le champs EmailAddress a un 'validator' dans Domain/Core/value_validators.dart

Repository
     Fichiers que l'on retrouve dans Infrastructure. Permet d'interagir avec le BackEnd.
     Exemple : Ajout / Modification / Suppression d'un objet en base de données. 

fichier_failure
    *******

value_object
    ********

value_validators
    ********

Either<ValueFailure, Result>
    ********